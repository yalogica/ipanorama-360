/*!
 * Transition Name: Mosaic
 */
!function(e){(function(e){"use strict";var t={name:"Mosaic",effect:function(e,t){this.viewer=t;this.shader={uniforms:{texture1:{value:null},texture2:{value:null},progress:{value:0},time:{value:0},timeDelta:{value:0},resolution:{value:new THREE.Vector2},endx:{value:2},endy:{value:-1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);","}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D texture1;","uniform sampler2D texture2;","uniform float progress;","uniform float time;","uniform float timeDelta;","uniform vec2 resolution;","const float PI = 3.141592653589793;","vec4 getFromColor(vec2 uv) {","return texture2D(texture1, uv);","}","vec4 getToColor(vec2 uv) {","return texture2D(texture2, uv);","}","#define PI 3.14159265358979323","#define POW2(X) X*X","#define POW3(X) X*X*X","uniform int endx;","uniform int endy;","float rand(vec2 v) {","return fract(sin(dot(v.xy ,vec2(12.9898,78.233))) * 43758.5453);","}","vec2 rotate(vec2 v, float a) {","mat2 rm = mat2(cos(a), -sin(a), sin(a), cos(a));","return rm*v;","}","float cosInterpolation(float x) {","return -cos(x*PI)/2.0 + 0.5;","}","void main() {","vec2 uv = vUv;","vec2 p = uv.xy / vec2(1.0).xy - 0.5;","vec2 rp = p;","float rpr = (progress*2.0 - 1.0);","float z = -(rpr*rpr*2.0) + 3.0;","float az = abs(z);","rp *= az;","rp += mix(vec2(0.5, 0.5), vec2(float(endx) + 0.5, float(endy) + 0.5), POW2(cosInterpolation(progress)));","vec2 mrp = mod(rp, 1.0);","vec2 crp = rp;","bool onEnd = int(floor(crp.x)) == endx && int(floor(crp.y)) == endy;","if(!onEnd) {","float ang = float(int(rand(floor(crp))*4.0)) * 0.5*PI;","mrp = vec2(0.5) + rotate(mrp-vec2(0.5), ang);","}","if(onEnd || rand(floor(crp))>0.5) {","gl_FragColor = getToColor(mrp);","} else {","gl_FragColor = getFromColor(mrp);","}","}"].join("\n"),side:THREE.DoubleSide};this.material=new THREE.ShaderMaterial(this.shader);this.init(e)}};t.effect.prototype={init:function(e){},getMaterial:function(){return this.material},destroy:function(){this.material.dispose()},onStart:function(e,t,r){},onUpdate:function(e,t,r){},onComplete:function(e,t){}},e.SceneTransitionEffect=e.SceneTransitionEffect||{},e.SceneTransitionEffect.Mosaic=t})((e=e||self).IPANORAMA=e.IPANORAMA||{})}(this);